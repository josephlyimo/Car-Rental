<div class="booking-container">
  <div class="booking-header">
    <h2>Book a Car</h2>
  </div>

  <form id="bookingForm" class="booking-form">
    {{#if car}}
      <div class="car-info">
        <p><strong>Car Name:</strong> {{car.name}}</p>
        <p><strong>Car Color:</strong> {{car.color}}</p>
        <p><strong>Car Type:</strong> {{car.type}}</p>
        <input type="hidden" id="car_id" name="car_id" value="{{car.id}}" />
        <p><strong>Purpose:</strong> {{car.type}}</p>
        <input type="hidden" id="purpose" name="purpose" value="{{car.type}}" />
      </div>
    {{else}}
      {{#with cars.[0]}}
        <div class="car-info">
          <p><strong>Car Name:</strong> {{name}}</p>
          <p><strong>Car Color:</strong> {{color}}</p>
          <p><strong>Car Type:</strong> {{type}}</p>
          <input type="hidden" id="car_id" name="car_id" value="{{id}}" />
          <p><strong>Purpose:</strong> {{type}}</p>
          <input type="hidden" id="purpose" name="purpose" value="{{type}}" />
        </div>
      {{/with}}
    {{/if}}

    <div class="date-group">
      <div class="date-input">
        <label for="start_date">Start Date:</label>
        <input type="date" id="start_date" name="start_date" required>
      </div>

      <div class="date-input">
        <label for="end_date">End Date:</label>
        <input type="date" id="end_date" name="end_date" required>
      </div>
    </div>

    <div class="price-info" id="priceInfo">
      Price: {{#if car}}{{car.price}}{{else}}{{cars.[0].price}}{{/if}} For 3 days
    </div>
    <p class="price-note">Note: If booking exceeds 3 days, price increases by 20,000 per extra day.</p>

    <button type="submit" class="booking-submit">Book Now</button>
  </form>
</div>

<script src="https://cdn.jsdelivr.net/npm/dayjs@1/dayjs.min.js"></script>
<script>
  const bookingForm = document.getElementById('bookingForm');
  const startDateInput = document.getElementById('start_date');
  const endDateInput = document.getElementById('end_date');
  const priceInfo = document.getElementById('priceInfo');

  const basePrice = {{#if car}}{{car.price}}{{else}}{{cars.[0].price}}{{/if}};
  const baseRentalDuration = 3;
  const extraDayPrice = 20000;

  function updatePrice() {
    const startDate = dayjs(startDateInput.value);
    const endDate = dayjs(endDateInput.value);
    if (!startDate.isValid() || !endDate.isValid()) {
      priceInfo.textContent = `Price: ${basePrice} For ${baseRentalDuration} days`;
      return;
    }
    const totalDays = endDate.diff(startDate, 'day') + 1;
    if (totalDays <= baseRentalDuration) {
      priceInfo.textContent = `Price: ${basePrice} For ${baseRentalDuration} days`;
    } else {
      const extraDays = totalDays - baseRentalDuration;
      const totalPrice = basePrice + extraDays * extraDayPrice;
      priceInfo.textContent = `Price: ${totalPrice} (Includes extra ${extraDays} day(s) charge)`;
    }
  }

  startDateInput.setAttribute('min', new Date().toISOString().split('T')[0]);
  endDateInput.setAttribute('min', new Date().toISOString().split('T')[0]);

  startDateInput.addEventListener('change', updatePrice);
  endDateInput.addEventListener('change', updatePrice);

  bookingForm.addEventListener('submit', async (e) => {
    const today = new Date().toISOString().split('T')[0];
    if (startDateInput.value < today) {
      e.preventDefault();
      alert('Start date cannot be in the past.');
      startDateInput.focus();
      return false;
    }
    if (endDateInput.value < today) {
      e.preventDefault();
      alert('End date cannot be in the past.');
      endDateInput.focus();
      return false;
    }
    if (endDateInput.value < startDateInput.value) {
      e.preventDefault();
      alert('End date cannot be before start date.');
      endDateInput.focus();
      return false;
    }

    e.preventDefault();
    const formData = new FormData(bookingForm);
    const data = {
      car_id: formData.get('car_id'),
      purpose: formData.get('purpose'),
      start_date: formData.get('start_date'),
      end_date: formData.get('end_date')
    };

    try {
      const response = await fetch('/bookings', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });
      if (response.ok) {
        // Show success message on page instead of alert
        const successMessage = document.createElement('div');
        successMessage.textContent = 'Booking created successfully!';
        successMessage.style.backgroundColor = '#4caf50';
        successMessage.style.color = 'white';
        successMessage.style.padding = '10px';
        successMessage.style.borderRadius = '5px';
        successMessage.style.marginBottom = '10px';
        bookingForm.parentNode.insertBefore(successMessage, bookingForm);
        setTimeout(() => {
          window.location.href = '/bookings/history';
        }, 2000);
      } else {
        const resData = await response.json();
        alert('Error: ' + resData.message);
      }
    } catch (err) {
      alert('Error: ' + err.message);
    }
  });
</script>
